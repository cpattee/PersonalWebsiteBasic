<% include header %>
<link rel="stylesheet" type="text/css" href="../js/GridLoadingEffects/css/component.css" />

<div class="container marketing">
<!-- PAGE-HEADER-->
	<div class="page-header">
		<h2><%-title %></h2>
			<p>Should one happen to tickle your fancy, you may click on it to explore in more detail.</p>
			<!-- BREADCRUMB -->
			<ul class="breadcrumb">
				<li><a href="#">Home</a> <span class="divider">&rarr;</span></li>
				<li><a href="/projects">Projects</a> <span class="divider">&rarr;</span></li>
				<li class="active">Data Viz</li>
			</ul>
			<!--END: BREADCRUMB -->
	</div>
<!-- PAGE-HEADER-->
</div>

	<!-- CONTENT CONTAINER-->
		<div class="container">
			
				<!-- FILTER-->
			<!-- just add your TAG to data-filter="ADD HERE" -->	
			<!-- and then add your same TAG to portfolio item class="ADD HERE" -->
			<div class="color-bottom-line center">
				<div class="well text-center">

						<div id="filters">
						
<button class="filter" data-filter="all"><a href="/projects">All</a></button>
<button class="filter" data-filter=".category-1"><a href="/projects/design">Design</a></button>
<button class="filter" data-filter=".category-2"><a href="/projects/traditional">Traditional</a></button>
<button class="filter" data-filter=".category-3"><a href="/projects/dataviz">Data Viz</a></button>
<button class="filter" data-filter=".category-3"><a href="/projects/programs">Programs</a></button>
<button class="filter" data-filter=".category-4">UX/UI</button>
						</div>
					</div>
			</div>
							
		<!--END: FILTER-->
		
	<!-- CONTENT CONTAINER-->
<div class="container">
	      <!-- START THE FEATURETTES -->
  
  <div class="panel-group" id="accordion2">
  <div class="panel panel-default">
    <div class="panel-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseOne">
        THE LIFE CYCLE OF A STAR
      </a>
      
    </div>
    <div id="collapseOne" class="panel-collapse collapse in">
      <div class="panel-body">
       
<script type="text/processing" data-processing-target="processing-canvas">
                 
float theta = 0, amt = 0.0, inc = 0.01;

final color FROMC = color(204, 102, 0);
final color TOC = color(0, 102, 153);
color changingColor;

void setup()
{
  size(800, 800); 
  smooth();
  
  changingColor = lerpColor(FROMC, TOC, amt);
}

void draw()
{
  drawMyShape();
}

// Custom function to draw a custom shape
void drawMyShape() {
  changingColor = lerpColor(FROMC, TOC, amt);
  background(changingColor); 
  stroke(255);

  // Translate to center of window 
  translate(width/2,height/2);
  scale(theta/2);
  

  // Loop from 0 to 360 degrees (2*PI radians)
  for(float i=0; i < TWO_PI; i+=0.8) 
  {
  // Push, rotate and draw a line! 
    pushMatrix(); 
    rotate(theta-i); 
    rect(10,10,10,50);
    // Loop from 0 to 360 degrees (2*PI radians) 
    for(float j=0; j <PI; j+=0.8) 
    {
      // Push, translate, rotate and draw a line! 
      pushMatrix(); 
      translate(50,0); 
      rotate(-theta- j);
      rect(0,0,40,40); 
      
      // We're done with the inside loop, pop!
      popMatrix();
    } 
    // We're done with the outside loop, pop! 
    popMatrix();
  } endShape();
  
// Increment theta 
  theta+=0.01;
  amt = amt +inc;
  
  if(amt == 1.0 || amt == 0.0)
    inc = -inc;
}
</script>
<canvas id="processing-canvas"> </canvas>
      </div>
    </div>
  </div>
  
  <div class="panel panel-default">
    <div class="panel-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseTwo">
        CONCENTRIC CIRCLE SLINKY
      </a>
    </div>
    <div id="collapseTwo" class="panel-collapse collapse">
      <div class="panel-body">
        <script type="text/processing" data-processing-target="processing-canvas2">
                  
  float Angle = 0;

void setup() {
   size(350, 300);
   fill(96, 196, 94, 160);
   smooth();
   translate(width/2,height/2); 
}

void draw() {
   background(5);
   for (int i=0; i<7; i++) { //i< value is number of balls
      float sine_angle = Angle * (1+i/5.3);
      float radius = map(sin(sine_angle), -1, 1, 100, 30);
      ellipse(150+(10*i), 110, 2*radius, 2*radius);
   }
   Angle += .03;
}
</script>
<canvas id="processing-canvas2"> </canvas>
      </div>
    </div>
  </div>
  
  <div class="panel panel-default">
    <div class="panel-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapseThree">
        MONEY POEM (mouse over rectangles to show text) 
      </a>
    </div>
    <div id="collapseThree" class="panel-collapse collapse">
      <div class="panel-body">
        <script type="text/processing" data-processing-target="processing-canvas3">
          
          final int N = 16;
int[] wordsX;
int[] wordsY;

String [] words = new String[N];
String currentWord;

boolean rectOver = false;
color rectColor;
int rectWidth = 20;
int rectHeight = 10;
int currentIdx = 0;
int prevIdx = 0;

PFont fontA;

void setup()
{
  size(1000, 720);
  smooth();
  background(255);
  rectColor = color(0);
  wordsX = new int[N];
  wordsY = new int[N];

  words[0] = "You need money.";
  words[1] = "Everything costs money.";
  words[2] = "Funny how having fun is often associated with money";
  words[3] = "They say money can't buy happiness,";
  words[4] = "but I'm pretty sure it buys everything else.";
  words[5] = "Well, I guess you can't buy friends.";
  words[6] = "You can, however, pick your friends.";
  words[7] = "You can pick your friends,";
  words[8] = "you can pick your nose,";
  words[9] = "but you can't pick your friend's noses...";
  words[10] = "unless you offer them some money.";
  words[11] = "Money talks, but I never hear it.";
  words[12] = "I often see it,";
  words[13] = "catch a glimpse of shimmering gold.";
  words[14] = "Remember the golden rule:";
  words[15] = "He who has the gold makes the rules.";
  
  fontA = loadFont("LucidaConsole-16.vlw");

  // Set the font and its size (in units of pixels)
  textFont(fontA, 14);
  
  // Initializes X/Y coordinates for each sentence rect
  for(int i=0; i<N; i++)
  {
    wordsX[i] = 250;
    wordsY[i] = (i+1)*(rectHeight + 30);
  }
}

void draw()
{
  update(mouseX, mouseY);

  stroke(204);
  fill(rectColor);
  for(int i=0; i<N; i++)
  {
    rect(wordsX[i], wordsY[i], rectWidth, rectHeight);
  }

  if(rectOver)
  {
    fill(0);
    text(words[currentIdx], wordsX[currentIdx]+100, wordsY[currentIdx]);
  } else {
    
    fill(255);
    text(words[prevIdx], wordsX[prevIdx]+100, wordsY[prevIdx]);
  }
  
}

void update(int x, int y)
{
  for(int i = 0; i < N; i++)
  {
    if ( overRect(wordsX[i], wordsY[i], rectWidth, rectHeight) ) {
      rectOver = true;
      prevIdx = currentIdx;
      currentIdx = i;
      
      break;
      
    } else {
      rectOver = false;
      prevIdx = currentIdx;
    }
  }
}

boolean overRect(int x, int y, int width, int height) 
{
  if (mouseX >= x && mouseX <= x+width && 
      mouseY >= y && mouseY <= y+height) {
    return true;
  } else {
    return false;
  }
} 
        </script>
<canvas id="processing-canvas3"> </canvas>
      </div>
    </div>
  </div>
	
	  <div class="panel panel-default">
    <div class="panel-heading">
      <a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion4" href="#collapseFour">
        CONCENTRIC CIRCLE SLINKY
      </a>
    </div>
    <div id="collapseFour" class="panel-collapse collapse">
      <div class="panel-body">
        <script type="text/processing" data-processing-target="processing-canvas4">
                  
/////////////////////////////////////////
//////////CHELSEA PATTEE/////////////////
/////////////////////////////////////////

//my start number is 10500

// Skeleton file for dome animations

// The following declarations/instantiations are needed for the skeletob
// counter is needed to count to 300 images produced
int counter = 0;
// your filename start number (this to be assigned)
int startNumber = 10500; // THIS IS THE VALUE TO EDIT with your assigned start number for file names
// the size of the screen and output images
int screenDimension = 640; // width *and* height (THIS IS THE VALUE TO EDIT FOR IMAGE/SCREEN size)
int w = screenDimension; // width
int h = screenDimension; // height
// This one may be useful!
// note that this is the center for a dome screen
int centerX = w/2;
int domeCenterY = int(h * .75); // dome center!

/////////// And you will need your "own" variables for your
/////////// Animation. 
// just using x and y here to maintain the drawing coordinates
// you may use another approach
int x = centerX;
int y = domeCenterY;

// 2D array of objects
Cell[][]grid;
PImage[]images = new PImage[21];
PImage img = new PImage();
int p;

//number of columns and rows in grid
int cols = 10;
int rows = 6;

float r = 0.001;
float theta1 = -5.0;
//float  = 5.0 //value for changing stroke

void setup(){
 // { 
  size(640,640,P3D);
  lights();
    for (int i = 0; i < images.length; i ++)
    {
      images[i] = loadImage( i +".jpg");
      images[i].resize(640,640);
    }

  grid = new Cell[cols][rows];
    for (int i = 0; i < cols; i++) 
    {
      for (int j = 0; j <rows; j++)
      {
      //initialize each new object
      grid[i][j] = new Cell(i*30, j*30, 30, 30, i+j);
      }
    }
   // background(images[0]);
   // scale(.04);
}

void draw() {
  /////////// You do drawing things - whatever that is between HERE
  stroke(0); //stroke for rect  
  //stroke(10); // stroke for sphere
 // noFill();
  // sphere(280);
  fill(175, 10); 

  // Translate to center of window   
  translate(width/2,height/2); 
  
  // The counter variables i and j are also the column and row numbers and 
  // are used as arguments to the constructor for each object in the grid.  

  for (int i = 0; i < cols; i++) {
    for (int j = 0; j < rows; j++) {
      // Oscillate and display each object
      grid[i][j].oscillate();
      grid[i][j].display();
    }
  }
 for(int count = 0;count<21;count ++)
    {
     p=int(random(21));
     image(images[p],0,0);
     //scale(tan(r));
     //scale(r);
      scale(r*.005);
     //scale(.004);
      pushMatrix();
      scale(r*.005);
      translate(width/2,height/2);
      popMatrix();
     }
}
  
// A Cell object
class Cell {
  // A cell object knows about its location in the grid as well as its size with the variables x,y,w,h.
  float x,y;   // x,y location
  float w,h;   // width and height
  float angle; // angle for oscillating brightness

  // Cell Constructor
  Cell(float tempX, float tempY, float tempW, float tempH, float tempAngle) {
    x = tempX;
    y = tempY;
    w = (tempW)+1;
    h = tempH;
    angle = tempAngle;
  } 
  
  // Oscillation means increase angle
  void oscillate() {
    angle += 0.01; //increases speed of tiling
  }

  void display() {
    stroke(350); //change to 400, becomes an 'eye'(watching, surveillance, self-regulating system..)
    // Color of end pixels calculated using tan wave
    fill(20+15*tan(angle), 20+15*tan(angle), 20+15*tan(angle), 10);
    //fill(10+5*sin(angle), 10+5*sin(angle), 10+5*tan(angle), 5);
    //fill(10+3*cos(angle), 10+3*cos(angle), 10+3*cos(angle), 5);
    
    //sphere in center
    //sphere(x);
    
    //rect in center
    rect(x,y,w,h);  
 
    rotateZ(theta1*2); 
    
  // Increase the scale variable 
  r += 0.005; //use for showing as animation
 //   r += 0.01;  //use for dome 10 sec export  
  // r += 0.002;
  theta1 += 0.05;
  
  }// new in
  /////////// and HERE
  
  // save the image file - easy! and you might comment this out
  // for better testing performance because writing the image
  // to a file takes a lot of time
//  String nameStr = counter + startNumber + "";
//  while (nameStr.length() < 5) { 
//    // think about this... what does it do?
//    nameStr = "0" + nameStr;
//  }
//  save(nameStr + ".png"); 
//  // actually writes the screen to a file
//  
//  // exit if greater than the assigned range (yes it says 299 below... why do you think?)
//  if ((startNumber + counter) >= (startNumber + 299)) { 
//    exit();
//  } else {
//    counter++;
//  }
//} //new out
}
// just some end notes, sections are assigned these ranges
// section A01 000000-006599 (for example 000000.png to 000299.png, 000300-000599, etc)
// section A02 06600-013199
// section A03 013200-019799
// section A04 019800-026399
// section A05 026400-032999
// section A06 033000-039599
// for more info on dome production: http://spacetheater.wordpress.com/introduction-to-fulldome-attention-nweamo-producers/

</script>
<canvas id="processing-canvas4"> </canvas>
      </div>
    </div>
  </div>
		
</div>

      <hr class="featurette-divider">

      <!-- /END THE FEATURETTES -->

			

</div>
<script src="/js/GridLoadingEffects/js/masonry.pkgd.min.js"></script>
<script src="/js/GridLoadingEffects/js/imagesloaded.js"></script>
<script src="/js/GridLoadingEffects/js/classie.js"></script>
<script src="/js/GridLoadingEffects/js/AnimOnScroll.js"></script>
<script>
	$(function(){
	$('#container').mixItUp();	
});
</script>
<script>
	new AnimOnScroll( document.getElementById( 'grid' ), {
		minDuration : 0.4,
		maxDuration : 0.7,
		viewportFactor : 0.2
	} );
</script>

<% include footer %>